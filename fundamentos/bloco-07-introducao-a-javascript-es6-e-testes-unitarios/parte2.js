// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.
// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.
// Crie uma fun√ß√£o que receba uma frase e retorne a maior palavra.

const factorial = (number) => {
    let result = 1;

    for (let index = 2; index <= number; index += 1) {
        result *= index;
    }

    return result;
};

// Crie uma fun√ß√£o que receba uma frase e retorne a maior palavra.

const longestWord = (text) => {
    const wordArray = text.split(' ');
    let maxLength = 0;
    let result = '';

    for (const word of wordArray) {
        if (word.length > maxLength) {
            maxLength = word.length;
            result = word;
        }
    }
    
    return result;
}

console.log(longestWord('Antonio foi ao banheiro e n√£o sabemos o que aconteceu'));

// üöÄ Crie uma p√°gina com um contador de cliques
// Sua p√°gina deve conter:
// Um bot√£o ao qual ser√° associado um event listener;
// Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
// Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.

